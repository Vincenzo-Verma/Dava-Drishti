version: '3.8'

services:
  # Main application
  app:
    build: .
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/forest_fire_db
      - MONGODB_URL=mongodb://mongo:27017/forest_fire_ml
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - postgres
      - mongo
      - redis
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    restart: unless-stopped
    networks:
      - forest_fire_network

  # PostgreSQL with PostGIS
  postgres:
    image: postgis/postgis:15-3.3
    environment:
      - POSTGRES_DB=forest_fire_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    networks:
      - forest_fire_network

  # MongoDB for ML metadata
  mongo:
    image: mongo:6.0
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
      - ./docker/mongo/init.js:/docker-entrypoint-initdb.d/init.js
    restart: unless-stopped
    networks:
      - forest_fire_network

  # Redis for caching
  redis:
    image: redis:7.0-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - forest_fire_network

  # Celery worker for background tasks
  celery_worker:
    build: .
    command: celery -A app.celery worker --loglevel=info
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/forest_fire_db
      - MONGODB_URL=mongodb://mongo:27017/forest_fire_ml
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - postgres
      - mongo
      - redis
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    restart: unless-stopped
    networks:
      - forest_fire_network

  # Celery beat for scheduled tasks
  celery_beat:
    build: .
    command: celery -A app.celery beat --loglevel=info
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/forest_fire_db
      - MONGODB_URL=mongodb://mongo:27017/forest_fire_ml
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - postgres
      - mongo
      - redis
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    restart: unless-stopped
    networks:
      - forest_fire_network

  # Flower for Celery monitoring
  flower:
    build: .
    command: celery -A app.celery flower --port=5555
    ports:
      - "5555:5555"
    environment:
      - FLASK_ENV=production
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - redis
      - celery_worker
    restart: unless-stopped
    networks:
      - forest_fire_network

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - app
    restart: unless-stopped
    networks:
      - forest_fire_network

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - forest_fire_network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - forest_fire_network

  # MLflow for model tracking
  mlflow:
    build: .
    command: mlflow server --host 0.0.0.0 --port 5001
    ports:
      - "5001:5001"
    environment:
      - MLFLOW_TRACKING_URI=sqlite:///mlflow.db
    volumes:
      - mlflow_data:/mlflow
      - ./data/models:/mlflow/models
    restart: unless-stopped
    networks:
      - forest_fire_network

volumes:
  postgres_data:
  mongo_data:
  redis_data:
  prometheus_data:
  grafana_data:
  mlflow_data:

networks:
  forest_fire_network:
    driver: bridge 